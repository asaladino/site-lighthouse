{"version":3,"sources":["../../src/Controller/LighthouseController.js"],"names":["LighthouseController","constructor","args","logger","Logger","start","callback","event","progress","Promise","resolve","reject","output","doesFolderExist","lighthouseService","LighthouseService","on","report","toLog","verbose","console","log","toString","then"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,oBAAN,CAA2B;AAKtCC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,eAAJ,CAAWF,IAAX,CAAd;AACH;;AAEDG,EAAAA,KAAK,GAA8D;AAAA,QAA7DC,QAA6D,uEAAxC,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE,CAAiB;AAC/D,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAKT,IAAL,CAAUU,MAAV,CAAiBC,eAAjB;AACA,YAAMC,iBAAiB,GAAG,IAAIC,0BAAJ,CAAsB,KAAKb,IAA3B,CAA1B;AACAY,MAAAA,iBAAiB,CAACE,EAAlB,CAAqB,OAArB,EAA8BR,QAAQ,IAAI;AACtCF,QAAAA,QAAQ,CAAC,OAAD,EAAUE,QAAV,CAAR;AACA,aAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB;;AACA,YAAI,KAAKhB,IAAL,CAAUiB,OAAd,EAAuB;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ;AACH;AACJ,OAND,EAMGN,EANH,CAMM,UANN,EAMkBR,QAAQ,IAAI;AAC1BF,QAAAA,QAAQ,CAAC,UAAD,EAAaE,QAAb,CAAR;AACA,aAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB;;AACA,YAAI,KAAKhB,IAAL,CAAUiB,OAAd,EAAuB;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ;AACH;AACJ,OAZD,EAYGN,EAZH,CAYM,UAZN,EAYkBR,QAAQ,IAAI;AAC1BF,QAAAA,QAAQ,CAAC,UAAD,EAAaE,QAAb,CAAR;AACA,aAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB;;AACA,YAAI,KAAKhB,IAAL,CAAUiB,OAAd,EAAuB;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ;AACH;;AACDZ,QAAAA,OAAO;AACV,OAnBD;AAoBAI,MAAAA,iBAAiB,CAACT,KAAlB,GAA0BkB,IAA1B;AACH,KAxBM,CAAP;AAyBH;;AApCqC","sourcesContent":["// @flow\nimport LighthouseService from \"../Service/LighthouseService\";\nimport Args from \"../Model/Args\";\nimport Logger from \"../Utility/Logger\";\n\nexport default class LighthouseController {\n\n    args: Args;\n    logger: Logger;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.logger = new Logger(args);\n    }\n\n    start(callback: function = (event, progress) => {}): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.args.output.doesFolderExist();\n            const lighthouseService = new LighthouseService(this.args);\n            lighthouseService.on('start', progress => {\n                callback('start', progress);\n                this.logger.report(progress.toLog());\n                if (this.args.verbose) {\n                    console.log(progress.toString());\n                }\n            }).on('progress', progress => {\n                callback('progress', progress);\n                this.logger.report(progress.toLog());\n                if (this.args.verbose) {\n                    console.log(progress.toString());\n                }\n            }).on('complete', progress => {\n                callback('complete', progress);\n                this.logger.report(progress.toLog());\n                if (this.args.verbose) {\n                    console.log(progress.toString());\n                }\n                resolve();\n            });\n            lighthouseService.start().then();\n        });\n    }\n}\n"],"file":"LighthouseController.js"}