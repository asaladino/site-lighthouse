{"version":3,"sources":["../../src/Controller/LighthouseController.js"],"names":["LighthouseController","constructor","args","logger","Logger","start","callback","event","progress","Promise","resolve","reject","output","doesFolderExist","lighthouseService","LighthouseService","on","report","toLog","verbose","console","log","toString","then"],"mappings":"6FACA,uFACA,2DACA,iE,kFAEe,KAAMA,CAAAA,oBAAqB,CAKtCC,WAAW,CAACC,IAAD,CAAa,CACpB,KAAKA,IAAL,CAAYA,IAAZ,CACA,KAAKC,MAAL,CAAc,GAAIC,gBAAJ,CAAWF,IAAX,CACjB,CAEDG,KAAK,EAA8D,IAA7DC,CAAAA,QAA6D,2DAAxC,CAACC,KAAD,CAAQC,QAAR,GAAqB,CAAE,CAAiB,CAC/D,MAAO,IAAIC,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CACpC,KAAKT,IAAL,CAAUU,MAAV,CAAiBC,eAAjB,GACA,KAAMC,CAAAA,iBAAiB,CAAG,GAAIC,2BAAJ,CAAsB,KAAKb,IAA3B,CAA1B,CACAY,iBAAiB,CAACE,EAAlB,CAAqB,OAArB,CAA8BR,QAAQ,EAAI,CACtCF,QAAQ,CAAC,OAAD,CAAUE,QAAV,CAAR,CACA,KAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB,EACA,GAAI,KAAKhB,IAAL,CAAUiB,OAAd,CAAuB,CACnBC,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ,CACH,CACJ,CAND,EAMGN,EANH,CAMM,UANN,CAMkBR,QAAQ,EAAI,CAC1BF,QAAQ,CAAC,UAAD,CAAaE,QAAb,CAAR,CACA,KAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB,EACA,GAAI,KAAKhB,IAAL,CAAUiB,OAAd,CAAuB,CACnBC,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ,CACH,CACJ,CAZD,EAYGN,EAZH,CAYM,UAZN,CAYkBR,QAAQ,EAAI,CAC1BF,QAAQ,CAAC,UAAD,CAAaE,QAAb,CAAR,CACA,KAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB,EACA,GAAI,KAAKhB,IAAL,CAAUiB,OAAd,CAAuB,CACnBC,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ,CACH,CACDZ,OAAO,EACV,CAnBD,EAoBAI,iBAAiB,CAACT,KAAlB,GAA0BkB,IAA1B,EACH,CAxBM,CAyBV,CApCqC,C","sourcesContent":["// @flow\nimport LighthouseService from \"../Service/LighthouseService\";\nimport Args from \"../Model/Args\";\nimport Logger from \"../Utility/Logger\";\n\nexport default class LighthouseController {\n\n    args: Args;\n    logger: Logger;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.logger = new Logger(args);\n    }\n\n    start(callback: function = (event, progress) => {}): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.args.output.doesFolderExist();\n            const lighthouseService = new LighthouseService(this.args);\n            lighthouseService.on('start', progress => {\n                callback('start', progress);\n                this.logger.report(progress.toLog());\n                if (this.args.verbose) {\n                    console.log(progress.toString());\n                }\n            }).on('progress', progress => {\n                callback('progress', progress);\n                this.logger.report(progress.toLog());\n                if (this.args.verbose) {\n                    console.log(progress.toString());\n                }\n            }).on('complete', progress => {\n                callback('complete', progress);\n                this.logger.report(progress.toLog());\n                if (this.args.verbose) {\n                    console.log(progress.toString());\n                }\n                resolve();\n            });\n            lighthouseService.start().then();\n        });\n    }\n}\n"],"file":"LighthouseController.js"}