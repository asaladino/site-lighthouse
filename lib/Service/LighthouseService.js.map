{"version":3,"sources":["../../src/Service/LighthouseService.js"],"names":["LighthouseService","constructor","args","events","Map","optionsRepository","OptionsRepository","option","getOption","urlsRepository","UrlsRepository","createOutputFolder","start","ChromeLauncher","launch","chromeFlags","then","chrome","runReports","catch","reason","console","log","flags","port","urls","findAll","filter","url","fs","existsSync","path","join","folder","name","progress","Progress","length","emitStart","results","Printer","write","JSON","stringify","update","emitProgress","emitComplete","kill","output","filename","getSiteName","mkdirSync","on","event","callback","set","forEach"],"mappings":"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","sourcesContent":["// @flow\nimport * as ChromeLauncher from \"chrome-launcher\";\nimport lighthouse from \"lighthouse\";\n\nimport lighthouseDefaultConfig from \"../Config/LighthouseDefault\";\nimport Printer from \"lighthouse/lighthouse-cli/printer\";\nimport UrlsRepository from \"../Repository/UrlsRepository\";\nimport OptionsRepository from \"../Repository/OptionsRepository\";\nimport Args from \"../Model/Args\";\nimport Option from \"../Model/Option\";\nimport Url from \"../Model/Url\";\nimport Progress from \"../Model/Progress\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nexport default class LighthouseService {\n\n    events: Map<string, function>;\n    args: Args;\n    optionsRepository: OptionsRepository;\n    urlsRepository: UrlsRepository;\n    option: Option;\n    folder: string;\n\n    constructor(args: Args) {\n        this.events = new Map();\n        this.args = args;\n        this.optionsRepository = new OptionsRepository(this.args);\n        this.option = this.optionsRepository.getOption();\n        this.urlsRepository = new UrlsRepository(this.option, this.args);\n        this.createOutputFolder();\n    }\n\n    async start() {\n        ChromeLauncher.launch({\n            chromeFlags: ['--headless', '--disable-gpu', '--no-sandbox']\n        }).then(chrome => this.runReports(chrome))\n            .catch(reason => console.log(reason));\n    }\n\n    async runReports(chrome: any) {\n        let flags = {};\n        flags.port = chrome.port;\n        let urls = this.urlsRepository.findAll().filter(url => {\n            return !fs.existsSync(path.join(this.folder, url.name + '.json'));\n        });\n        let progress = new Progress(null, urls.length);\n\n        this.emitStart(progress);\n        for (let url of urls) {\n            let results = await lighthouse(url.url, flags);\n            await Printer.write(JSON.stringify(results), 'json', path.join(this.folder, url.name + '.json'));\n            progress.update(url);\n            this.emitProgress(progress);\n        }\n\n        this.emitComplete(new Progress(null, urls.length));\n        await chrome.kill();\n    }\n\n    /**\n     * Create the output folder if it doesn't exist.\n     */\n    createOutputFolder() {\n        this.folder = path.join(this.args.output.filename, this.args.getSiteName(), 'lighthouse');\n        if (!fs.existsSync(this.folder)) {\n            fs.mkdirSync(this.folder)\n        }\n    }\n\n    /**\n     * Receive event information.\n     * @param event {string} name of the event. (start, progress, and complete)\n     * @param callback {Function} called when the event is emitted.\n     * @returns {LighthouseService} for chaining.\n     */\n    on(event: string, callback: function) {\n        this.events.set(event, callback);\n        return this;\n    }\n\n    /**\n     * Emits that start event.\n     * @param progress {Progress} found at start.\n     */\n    emitStart(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'start') {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emits that progress event.\n     * @param progress {Progress} that is currently having its content extracted from.\n     */\n    emitProgress(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'progress') {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emits that complete event when service has finished.\n     * @param progress {Progress} that we be done.\n     */\n    emitComplete(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'complete') {\n                callback(progress);\n            }\n        });\n    }\n}\n"],"file":"LighthouseService.js"}