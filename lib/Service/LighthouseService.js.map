{"version":3,"sources":["../../src/Service/LighthouseService.js"],"names":["ChromeLauncher","require","lighthouse","lighthouseDefaultConfig","Printer","UrlsRepository","OptionsRepository","Url","Progress","path","fs","LighthouseService","constructor","args","events","Map","optionsRepository","option","getOption","urlsRepository","createOutputFolder","start","launch","chromeFlags","then","chrome","runReports","catch","reason","console","log","flags","port","urls","findAll","filter","url","existsSync","join","folder","name","progress","length","emitStart","results","printReport","update","emitProgress","emitComplete","kill","artifacts","write","output","filename","getSiteName","mkdirSync","on","event","callback","set","forEach","module","exports"],"mappings":"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","sourcesContent":["const ChromeLauncher = require('chrome-launcher');\nconst lighthouse = require('lighthouse');\nconst lighthouseDefaultConfig = require('../Config/LighthouseDefault');\n\nconst Printer = require('lighthouse/lighthouse-cli/printer');\nconst UrlsRepository = require('../Repository/UrlsRepository');\nconst OptionsRepository = require('../Repository/OptionsRepository');\nconst Url = require('../Model/Url');\nconst Progress = require('../Model/Progress');\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\nclass LighthouseService {\n\n    constructor(args) {\n        this.events = new Map();\n        this.args = args;\n        this.optionsRepository = new OptionsRepository(this.args);\n        this.option = this.optionsRepository.getOption();\n        this.urlsRepository = new UrlsRepository(this.option, this.args);\n        this.createOutputFolder();\n    }\n\n    async start() {\n        ChromeLauncher.launch({\n            chromeFlags: ['--headless', '--disable-gpu', '--no-sandbox']\n        }).then(chrome => this.runReports(chrome))\n            .catch(reason => console.log(reason));\n    }\n\n    async runReports(chrome) {\n        let flags = {};\n        flags.port = chrome.port;\n        let urls = this.urlsRepository.findAll().filter(url => {\n            return !fs.existsSync(path.join(this.folder, url.name + '.json'));\n        });\n        let progress = new Progress(null, urls.length);\n\n        this.emitStart(progress);\n        for (let url of urls) {\n            let results = await lighthouse(url.url, flags, lighthouseDefaultConfig);\n            await this.printReport(results, url);\n            progress.update(url);\n            this.emitProgress(progress);\n        }\n\n        this.emitComplete(new Progress(null, urls.length));\n        await chrome.kill();\n    }\n\n    /**\n     * Print html and json reports.\n     * @param results {*}\n     * @param url {Url}\n     * @returns {Promise<void>}\n     */\n    async printReport(results, url) {\n        delete results.artifacts;\n        await Printer.write(results, 'json', path.join(this.folder, url.name + '.json'));\n    }\n\n    /**\n     * Create the output folder if it doesn't exist.\n     */\n    createOutputFolder() {\n        this.folder = path.join(this.args.output.filename, this.args.getSiteName(), 'lighthouse');\n        if (!fs.existsSync(this.folder)) {\n            fs.mkdirSync(this.folder)\n        }\n    }\n\n    /**\n     * Receive event information.\n     * @param event {string} name of the event. (start, progress, and complete)\n     * @param callback {Function} called when the event is emitted.\n     * @returns {LighthouseService} for chaining.\n     */\n    on(event, callback) {\n        this.events.set(event, callback);\n        return this;\n    }\n\n    /**\n     * Emits that start event.\n     * @param progress {Progress} found at start.\n     */\n    emitStart(progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'start') {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emits that progress event.\n     * @param progress {Progress} that is currently having its content extracted from.\n     */\n    emitProgress(progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'progress') {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emits that complete event when service has finished.\n     * @param progress {Progress} that we be done.\n     */\n    emitComplete(progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'complete') {\n                callback(progress);\n            }\n        });\n    }\n}\n\nmodule.exports = LighthouseService;"],"file":"LighthouseService.js"}