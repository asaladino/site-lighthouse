{"version":3,"sources":["../../src/Service/LighthouseService.js"],"names":["LighthouseService","constructor","args","events","Map","optionsRepository","OptionsRepository","option","getOption","urlsRepository","UrlsRepository","createOutputFolder","start","ChromeLauncher","launch","chromeFlags","then","chrome","runReports","catch","reason","console","log","flags","port","urls","findAll","filter","url","fs","existsSync","path","join","folder","name","progress","Progress","length","emitStart","results","Printer","write","JSON","stringify","update","emitProgress","emitComplete","kill","output","filename","getSiteName","mkdirSync","on","event","callback","set","forEach"],"mappings":"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","sourcesContent":["// @flow\nimport * as ChromeLauncher from \"chrome-launcher\";\nimport lighthouse from \"lighthouse\";\n\nimport lighthouseDefaultConfig from \"../Config/LighthouseDefault\";\nimport Printer from \"lighthouse/lighthouse-cli/printer\";\nimport UrlsRepository from \"../Repository/UrlsRepository\";\nimport OptionsRepository from \"../Repository/OptionsRepository\";\nimport Args from \"../Model/Args\";\nimport Option from \"../Model/Option\";\nimport Url from \"../Model/Url\";\nimport Progress from \"../Model/Progress\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nexport default class LighthouseService {\n\n    events: Map<string, function>;\n    args: Args;\n    optionsRepository: OptionsRepository;\n    urlsRepository: UrlsRepository;\n    option: Option;\n    folder: string;\n\n    constructor(args: Args) {\n        this.events = new Map();\n        this.args = args;\n        this.optionsRepository = new OptionsRepository(this.args);\n        this.option = this.optionsRepository.getOption();\n        this.urlsRepository = new UrlsRepository(this.option, this.args);\n        this.createOutputFolder();\n    }\n\n    async start() {\n        ChromeLauncher.launch({\n            chromeFlags: ['--headless', '--disable-gpu', '--no-sandbox']\n        }).then(chrome => this.runReports(chrome))\n            .catch(reason => console.log(reason));\n    }\n\n    async runReports(chrome: any) {\n        let flags = {};\n        flags.port = chrome.port;\n        let urls = this.urlsRepository.findAll().filter(url => {\n            return !fs.existsSync(path.join(this.folder, url.name + '.json'));\n        });\n        let progress = new Progress(null, urls.length);\n\n        this.emitStart(progress);\n        for (let url of urls) {\n            let results = await lighthouse(url.url, flags);\n            await Printer.write(JSON.stringify(results), 'json', path.join(this.folder, url.name + '.json'));\n            progress.update(url);\n            this.emitProgress(progress);\n        }\n\n        this.emitComplete(new Progress(null, urls.length));\n        await chrome.kill();\n    }\n\n    /**\n     * Create the output folder if it doesn't exist.\n     */\n    createOutputFolder() {\n        this.folder = path.join(this.args.output.filename, this.args.getSiteName(), 'lighthouse');\n        if (!fs.existsSync(this.folder)) {\n            fs.mkdirSync(this.folder)\n        }\n    }\n\n    /**\n     * Receive event information.\n     * @param event {string} name of the event. (start, progress, and complete)\n     * @param callback {Function} called when the event is emitted.\n     * @returns {LighthouseService} for chaining.\n     */\n    on(event: string, callback: function) {\n        this.events.set(event, callback);\n        return this;\n    }\n\n    /**\n     * Emits that start event.\n     * @param progress {Progress} found at start.\n     */\n    emitStart(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'start') {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emits that progress event.\n     * @param progress {Progress} that is currently having its content extracted from.\n     */\n    emitProgress(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'progress') {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emits that complete event when service has finished.\n     * @param progress {Progress} that we be done.\n     */\n    emitComplete(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === 'complete') {\n                callback(progress);\n            }\n        });\n    }\n}\n"],"file":"LighthouseService.js"}