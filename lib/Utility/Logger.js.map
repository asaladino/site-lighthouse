{"version":3,"sources":["../../src/Utility/Logger.js"],"names":["Logger","constructor","args","logsPath","getLogsPath","logger","winston","createLogger","level","format","json","transports","File","filename","path","join","save","state","Promise","resolve","file","fs","writeFileSync","JSON","stringify","info","log","report","logsPathBase","getProjectPath","existsSync","mkdirSync"],"mappings":"6FACA,wDACA,2DACA,kDACA,8C,kFAEe,KAAMA,CAAAA,MAAO,CAKxBC,WAAW,CAACC,IAAD,CAAa,CACpB,KAAKA,IAAL,CAAYA,IAAZ,CACA,KAAKC,QAAL,CAAgB,KAAKC,WAAL,EAAhB,CACA,KAAKC,MAAL,CAAcC,iBAAQC,YAAR,CAAqB,CAC/BC,KAAK,CAAE,MADwB,CAE/BC,MAAM,CAAEH,iBAAQG,MAAR,CAAeC,IAAf,EAFuB,CAG/BC,UAAU,CAAE,CACR,GAAIL,kBAAQK,UAAR,CAAmBC,IAAvB,CAA4B,CAACC,QAAQ,CAAEC,cAAKC,IAAL,CAAU,KAAKZ,QAAf,CAAyB,cAAzB,CAAX,CAA5B,CADQ,CAHmB,CAArB,CAOjB,CAEDa,IAAI,CAACC,KAAD,CAA4B,CAC5B,MAAO,IAAIC,CAAAA,OAAJ,CAAaC,OAAD,EAAa,CAC5B,GAAIC,CAAAA,IAAI,CAAGN,cAAKC,IAAL,CAAU,KAAKZ,QAAf,CAAyB,YAAzB,CAAX,CACAkB,YAAGC,aAAH,CAAiBF,IAAjB,CAAuBG,IAAI,CAACC,SAAL,CAAeP,KAAf,CAAvB,EACAE,OAAO,EACV,CAJM,CAKV,CAEDM,IAAI,CAACR,KAAD,CAAa,CACb,KAAKZ,MAAL,CAAYqB,GAAZ,CAAgB,MAAhB,CAAwBH,IAAI,CAACC,SAAL,CAAeP,KAAf,CAAxB,CACH,CAEDU,MAAM,CAACV,KAAD,CAAa,CACf,KAAKD,IAAL,CAAUC,KAAV,EACA,KAAKQ,IAAL,CAAUR,KAAV,CACH,CAGDb,WAAW,EAAG,CACV,GAAIwB,CAAAA,YAAY,CAAGd,cAAKC,IAAL,CAAU,KAAKb,IAAL,CAAU2B,cAAV,EAAV,CAAsC,MAAtC,CAAnB,CACA,GAAI,CAACR,YAAGS,UAAH,CAAcF,YAAd,CAAL,CAAkC,CAC9BP,YAAGU,SAAH,CAAaH,YAAb,CACH,CAED,GAAIzB,CAAAA,QAAQ,CAAGW,cAAKC,IAAL,CAAU,KAAKb,IAAL,CAAU2B,cAAV,EAAV,CAAsC,MAAtC,CAA8C,YAA9C,CAAf,CACA,GAAI,CAACR,YAAGS,UAAH,CAAc3B,QAAd,CAAL,CAA8B,CAC1BkB,YAAGU,SAAH,CAAa5B,QAAb,CACH,CACD,MAAOA,CAAAA,QACV,CA9CuB,C","sourcesContent":["// @flow\nimport winston from \"winston\";\nimport Args from \"../Model/Args\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nexport default class Logger {\n    args: Args;\n    logsPath: string;\n    logger: any;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.logsPath = this.getLogsPath();\n        this.logger = winston.createLogger({\n            level: 'info',\n            format: winston.format.json(),\n            transports: [\n                new winston.transports.File({filename: path.join(this.logsPath, 'last_run.log')})\n            ]\n        });\n    }\n\n    save(state: any): Promise<void> {\n        return new Promise((resolve) => {\n            let file = path.join(this.logsPath, 'state.json');\n            fs.writeFileSync(file, JSON.stringify(state));\n            resolve();\n        });\n    }\n\n    info(state: any) {\n        this.logger.log('info', JSON.stringify(state));\n    }\n\n    report(state: any) {\n        this.save(state);\n        this.info(state);\n    }\n\n\n    getLogsPath() {\n        let logsPathBase = path.join(this.args.getProjectPath(), 'logs');\n        if (!fs.existsSync(logsPathBase)) {\n            fs.mkdirSync(logsPathBase);\n        }\n\n        let logsPath = path.join(this.args.getProjectPath(), 'logs', 'lighthouse');\n        if (!fs.existsSync(logsPath)) {\n            fs.mkdirSync(logsPath);\n        }\n        return logsPath;\n    }\n}\n"],"file":"Logger.js"}