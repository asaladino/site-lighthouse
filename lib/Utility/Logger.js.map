{"version":3,"sources":["../../src/Utility/Logger.js"],"names":["winston","require","Args","path","fs","Logger","constructor","args","logsPath","getLogsPath","logger","createLogger","level","format","json","transports","File","filename","join","save","state","Promise","resolve","file","writeFileSync","JSON","stringify","info","log","report","logsPathBase","getProjectPath","existsSync","mkdirSync","module","exports"],"mappings":"AAAA,KAAMA,CAAAA,OAAO,CAAGC,OAAO,CAAC,SAAD,CAAvB,CACA,KAAMC,CAAAA,IAAI,CAAGD,OAAO,CAAC,eAAD,CAApB,CACA,KAAME,CAAAA,IAAI,CAAGF,OAAO,CAAC,MAAD,CAApB,CACA,KAAMG,CAAAA,EAAE,CAAGH,OAAO,CAAC,IAAD,CAAlB,CAEA,KAAMI,CAAAA,MAAO,CAET;;OAGAC,WAAW,CAACC,IAAD,CAAO,CACd,KAAKA,IAAL,CAAYA,IAAZ,CACA,KAAKC,QAAL,CAAgB,KAAKC,WAAL,EAAhB,CACA,KAAKC,MAAL,CAAcV,OAAO,CAACW,YAAR,CAAqB,CAC/BC,KAAK,CAAE,MADwB,CAE/BC,MAAM,CAAEb,OAAO,CAACa,MAAR,CAAeC,IAAf,EAFuB,CAG/BC,UAAU,CAAE,CACR,GAAIf,CAAAA,OAAO,CAACe,UAAR,CAAmBC,IAAvB,CAA4B,CAACC,QAAQ,CAAEd,IAAI,CAACe,IAAL,CAAU,KAAKV,QAAf,CAAyB,cAAzB,CAAX,CAA5B,CADQ,CAHmB,CAArB,CAOjB,CAEDW,IAAI,CAACC,KAAD,CAAQ,CACR,MAAO,IAAIC,CAAAA,OAAJ,CAAaC,OAAD,EAAa,CAC5B,GAAIC,CAAAA,IAAI,CAAGpB,IAAI,CAACe,IAAL,CAAU,KAAKV,QAAf,CAAyB,YAAzB,CAAX,CACAJ,EAAE,CAACoB,aAAH,CAAiBD,IAAjB,CAAuBE,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAvB,EACAE,OAAO,EACV,CAJM,CAKV,CAEDK,IAAI,CAACP,KAAD,CAAQ,CACR,KAAKV,MAAL,CAAYkB,GAAZ,CAAgB,MAAhB,CAAwBH,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAxB,CACH,CAEDS,MAAM,CAACT,KAAD,CAAQ,CACV,KAAKD,IAAL,CAAUC,KAAV,EACA,KAAKO,IAAL,CAAUP,KAAV,CACH,CAGDX,WAAW,EAAG,CACV,GAAIqB,CAAAA,YAAY,CAAG3B,IAAI,CAACe,IAAL,CAAU,KAAKX,IAAL,CAAUwB,cAAV,EAAV,CAAsC,MAAtC,CAAnB,CACA,GAAI,CAAC3B,EAAE,CAAC4B,UAAH,CAAcF,YAAd,CAAL,CAAkC,CAC9B1B,EAAE,CAAC6B,SAAH,CAAaH,YAAb,CACH,CAED,GAAItB,CAAAA,QAAQ,CAAGL,IAAI,CAACe,IAAL,CAAU,KAAKX,IAAL,CAAUwB,cAAV,EAAV,CAAsC,MAAtC,CAA8C,YAA9C,CAAf,CACA,GAAI,CAAC3B,EAAE,CAAC4B,UAAH,CAAcxB,QAAd,CAAL,CAA8B,CAC1BJ,EAAE,CAAC6B,SAAH,CAAazB,QAAb,CACH,CACD,MAAOA,CAAAA,QACV,CA9CQ,CAkDb0B,MAAM,CAACC,OAAP,CAAiB9B,MAAjB","sourcesContent":["const winston = require('winston');\nconst Args = require('../Model/Args');\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\nclass Logger {\n\n    /**\n     * @param {Args} args\n     */\n    constructor(args) {\n        this.args = args;\n        this.logsPath = this.getLogsPath();\n        this.logger = winston.createLogger({\n            level: 'info',\n            format: winston.format.json(),\n            transports: [\n                new winston.transports.File({filename: path.join(this.logsPath, 'last_run.log')})\n            ]\n        });\n    }\n\n    save(state) {\n        return new Promise((resolve) => {\n            let file = path.join(this.logsPath, 'state.json');\n            fs.writeFileSync(file, JSON.stringify(state));\n            resolve();\n        });\n    }\n\n    info(state) {\n        this.logger.log('info', JSON.stringify(state));\n    }\n\n    report(state) {\n        this.save(state);\n        this.info(state);\n    }\n\n\n    getLogsPath() {\n        let logsPathBase = path.join(this.args.getProjectPath(), 'logs');\n        if (!fs.existsSync(logsPathBase)) {\n            fs.mkdirSync(logsPathBase);\n        }\n\n        let logsPath = path.join(this.args.getProjectPath(), 'logs', 'lighthouse');\n        if (!fs.existsSync(logsPath)) {\n            fs.mkdirSync(logsPath);\n        }\n        return logsPath;\n    }\n\n}\n\nmodule.exports = Logger;"],"file":"Logger.js"}