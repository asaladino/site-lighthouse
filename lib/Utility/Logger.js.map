{"version":3,"sources":["../../src/Utility/Logger.js"],"names":["Logger","constructor","args","logsPath","getLogsPath","logger","winston","createLogger","level","format","json","transports","File","filename","path","join","save","state","Promise","resolve","file","fs","writeFileSync","JSON","stringify","info","log","report","logsPathBase","getProjectPath","existsSync","mkdirSync"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,MAAN,CAAa;AAKxBC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,KAAKC,WAAL,EAAhB;AACA,SAAKC,MAAL,GAAcC,iBAAQC,YAAR,CAAqB;AAC/BC,MAAAA,KAAK,EAAE,MADwB;AAE/BC,MAAAA,MAAM,EAAEH,iBAAQG,MAAR,CAAeC,IAAf,EAFuB;AAG/BC,MAAAA,UAAU,EAAE,CACR,IAAIL,iBAAQK,UAAR,CAAmBC,IAAvB,CAA4B;AAACC,QAAAA,QAAQ,EAAEC,cAAKC,IAAL,CAAU,KAAKZ,QAAf,EAAyB,cAAzB;AAAX,OAA5B,CADQ;AAHmB,KAArB,CAAd;AAOH;;AAEDa,EAAAA,IAAI,CAACC,KAAD,EAA4B;AAC5B,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,UAAIC,IAAI,GAAGN,cAAKC,IAAL,CAAU,KAAKZ,QAAf,EAAyB,YAAzB,CAAX;;AACAkB,kBAAGC,aAAH,CAAiBF,IAAjB,EAAuBG,IAAI,CAACC,SAAL,CAAeP,KAAf,CAAvB;;AACAE,MAAAA,OAAO;AACV,KAJM,CAAP;AAKH;;AAEDM,EAAAA,IAAI,CAACR,KAAD,EAAa;AACb,SAAKZ,MAAL,CAAYqB,GAAZ,CAAgB,MAAhB,EAAwBH,IAAI,CAACC,SAAL,CAAeP,KAAf,CAAxB;AACH;;AAEDU,EAAAA,MAAM,CAACV,KAAD,EAAa;AACf,SAAKD,IAAL,CAAUC,KAAV;AACA,SAAKQ,IAAL,CAAUR,KAAV;AACH;;AAGDb,EAAAA,WAAW,GAAG;AACV,QAAIwB,YAAY,GAAGd,cAAKC,IAAL,CAAU,KAAKb,IAAL,CAAU2B,cAAV,EAAV,EAAsC,MAAtC,CAAnB;;AACA,QAAI,CAACR,YAAGS,UAAH,CAAcF,YAAd,CAAL,EAAkC;AAC9BP,kBAAGU,SAAH,CAAaH,YAAb;AACH;;AAED,QAAIzB,QAAQ,GAAGW,cAAKC,IAAL,CAAU,KAAKb,IAAL,CAAU2B,cAAV,EAAV,EAAsC,MAAtC,EAA8C,YAA9C,CAAf;;AACA,QAAI,CAACR,YAAGS,UAAH,CAAc3B,QAAd,CAAL,EAA8B;AAC1BkB,kBAAGU,SAAH,CAAa5B,QAAb;AACH;;AACD,WAAOA,QAAP;AACH;;AA9CuB","sourcesContent":["// @flow\nimport winston from \"winston\";\nimport Args from \"../Model/Args\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nexport default class Logger {\n    args: Args;\n    logsPath: string;\n    logger: any;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.logsPath = this.getLogsPath();\n        this.logger = winston.createLogger({\n            level: 'info',\n            format: winston.format.json(),\n            transports: [\n                new winston.transports.File({filename: path.join(this.logsPath, 'last_run.log')})\n            ]\n        });\n    }\n\n    save(state: any): Promise<void> {\n        return new Promise((resolve) => {\n            let file = path.join(this.logsPath, 'state.json');\n            fs.writeFileSync(file, JSON.stringify(state));\n            resolve();\n        });\n    }\n\n    info(state: any) {\n        this.logger.log('info', JSON.stringify(state));\n    }\n\n    report(state: any) {\n        this.save(state);\n        this.info(state);\n    }\n\n\n    getLogsPath() {\n        let logsPathBase = path.join(this.args.getProjectPath(), 'logs');\n        if (!fs.existsSync(logsPathBase)) {\n            fs.mkdirSync(logsPathBase);\n        }\n\n        let logsPath = path.join(this.args.getProjectPath(), 'logs', 'lighthouse');\n        if (!fs.existsSync(logsPath)) {\n            fs.mkdirSync(logsPath);\n        }\n        return logsPath;\n    }\n}\n"],"file":"Logger.js"}